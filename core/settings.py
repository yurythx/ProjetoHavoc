"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
from pathlib import Path
from decouple import config, Csv

# Importar configurações de segurança
try:
    from .security_settings import (
        get_security_settings,
        get_performance_settings,
        get_monitoring_settings
    )
    SECURITY_SETTINGS_AVAILABLE = True
except ImportError:
    SECURITY_SETTINGS_AVAILABLE = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Detectar se estamos em modo de teste (deve ser definido antes de usar)
TESTING = 'test' in sys.argv


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
def get_debug_setting():
    """Obtém configuração de DEBUG do SystemConfig ou .env"""
    try:
        # Tentar obter do SystemConfig (banco de dados)
        from apps.config.models import SystemConfig
        system_config = SystemConfig.objects.first()
        if system_config:
            return system_config.debug_mode
    except:
        # Se falhar (banco não existe, etc), usar .env
        pass

    # Fallback para .env
    return config('DEBUG', default=False, cast=bool)

DEBUG = get_debug_setting()



ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())

# Adicionar testserver para testes e desenvolvimento
if TESTING or DEBUG:
    if 'testserver' not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append('testserver')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Pacotes de terceiros
    'crispy_forms',
    'crispy_bootstrap5',  # se usar Bootstrap 5
    'widget_tweaks',      # para personalização de widgets de formulário
    'compressor',         # para compressão de CSS/JS

    # AllAuth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',

    # Apps do projeto
    'apps.accounts',
    'apps.articles',
    'apps.pages',
    'apps.config',
]

# Debug Toolbar (apenas em desenvolvimento e não em testes)
if DEBUG and not TESTING:
    INSTALLED_APPS += ['debug_toolbar']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'core.performance_monitor.PerformanceMiddleware',  # Monitor de performance
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # AllAuth middleware
    'allauth.account.middleware.AccountMiddleware',

    # Middleware unificado para segurança, auditoria e performance
    'core.middleware.UnifiedSecurityMiddleware',
    'apps.accounts.middleware.UserAuditMiddleware',

    # Middleware para controle de apps
    'apps.config.middleware.AppControlMiddleware',
]

# Debug Toolbar Middleware (apenas em desenvolvimento e não em testes)
if DEBUG and not TESTING:
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'core.urls'

AUTH_USER_MODEL = 'accounts.CustomUser'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # Templates modulares do app pages (prioridade máxima)
            os.path.join(BASE_DIR, 'apps', 'pages', 'templates'),
            # Fallback para templates na raiz (se existir)
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Context processors personalizados para layout modular
                'apps.pages.context_processors.layout_context',
                'apps.pages.context_processors.app_context',
                'apps.pages.context_processors.navigation_context',
                # Context processor para configurações do sistema
                'apps.config.context_processors.system_config',
            ],
        },
    },
]

# Configurações do Django-allauth
AUTHENTICATION_BACKENDS = [
    # Django padrão
    'django.contrib.auth.backends.ModelBackend',

    # AllAuth
    'allauth.account.auth_backends.AuthenticationBackend',

]


# Configurações do Allauth
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

# Desabilitar signup padrão do allauth (usamos nossa própria view)
ACCOUNT_SIGNUP_ENABLED = False

# Redirecionamentos personalizados
ACCOUNT_SIGNUP_REDIRECT_URL = '/accounts/register/'

# Configurações de Login/Logout
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'
ACCOUNT_LOGOUT_ON_GET = True  # Permite logout via GET (menos seguro, mas mais conveniente)

# Configurações de Sessão
SESSION_COOKIE_AGE = 3600  # 1 hora em segundos
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Sessão expira ao fechar o navegador
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
SESSION_COOKIE_HTTPONLY = True  # Previne acesso ao cookie via JavaScript

# Configurações adicionais de segurança
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)

# Configurações HSTS e outras configurações de segurança (ativar em produção)
if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000  # 1 ano
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# Configurações de Provedores Sociais
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'SCOPE': [
            'user',
            'repo',
            'read:org',
        ],
    }
}

WSGI_APPLICATION = 'core.wsgi.application'

SITE_DOMAIN = config('SITE_DOMAIN', default='http://localhost:8000')

# Configurações de Email
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='no-reply@seudominio.com')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', default=25, cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)

# Configuração dinâmica de email será aplicada pelo sistema de configurações
# O backend será definido dinamicamente baseado nas configurações de EmailConfig



CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuração padrão usando sqlite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / config('DATABASE_URL', default='db.sqlite3').split('/')[-1],
    }
}

# Suporte para configuração de banco de dados via URL (para PostgreSQL, MySQL, etc.)
db_from_env = config('DATABASE_URL', default=None)
if db_from_env and not db_from_env.startswith('sqlite'):
    import dj_database_url
    DATABASES['default'] = dj_database_url.parse(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = config('LANGUAGE_CODE', default='pt-br')

TIME_ZONE = config('TIME_ZONE', default='America/Sao_Paulo')

USE_I18N = True

USE_TZ = True

SITE_ID = 1


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# CONFIGURAÇÕES DE MONITORAMENTO E DEBUG
# =============================================================================

# Django Debug Toolbar
if DEBUG and not TESTING:
    INTERNAL_IPS = [
        '127.0.0.1',
        'localhost',
    ]

    # Configurações do Debug Toolbar
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
        'SHOW_COLLAPSED': True,
        'SHOW_TEMPLATE_CONTEXT': True,
        'IS_RUNNING_TESTS': False,  # Desabilitar durante testes
    }

    # Painéis do Debug Toolbar
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
    ]

# =============================================================================
# CONFIGURAÇÕES DE LOGGING
# =============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'json',
        },
        'performance_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'performance.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'json',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_file', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },
        'apps.accounts': {
            'handlers': ['console', 'file', 'security_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'performance': {
            'handlers': ['performance_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'] if DEBUG else [],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}

# Criar diretório de logs se não existir
import os
logs_dir = BASE_DIR / 'logs'
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

# =============================================================================
# CONFIGURAÇÕES DE CACHE
# =============================================================================

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutos
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# Cache para sessões (opcional)
if not DEBUG:
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'

# =============================================================================
# CONFIGURAÇÕES DE PERFORMANCE
# =============================================================================

# Configurações de performance para produção
if not DEBUG:
    # Compressão de resposta
    MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')

    # Cache de templates
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]

# Configurações de timeout
DATABASE_CONN_MAX_AGE = 60  # Reutilizar conexões por 60 segundos

# =============================================================================
# CONFIGURAÇÕES DE MÉTRICAS
# =============================================================================

# Configurações para coleta de métricas
METRICS_ENABLED = config('METRICS_ENABLED', default=DEBUG, cast=bool)

if METRICS_ENABLED:
    # Configurações para métricas de performance
    PERFORMANCE_MONITORING = {
        'SLOW_QUERY_THRESHOLD': 0.5,  # Log queries > 500ms
        'SLOW_REQUEST_THRESHOLD': 2.0,  # Log requests > 2s
        'MEMORY_THRESHOLD': 100,  # MB
    }

# =============================================================================
# APLICAR CONFIGURAÇÕES DE SEGURANÇA AVANÇADAS
# =============================================================================

if SECURITY_SETTINGS_AVAILABLE:
    # Aplicar configurações de segurança
    security_config = get_security_settings(DEBUG)

    # Atualizar configurações existentes com as de segurança
    for key, value in security_config.items():
        if key not in ['AUTH_PASSWORD_VALIDATORS', 'SECURITY_LOGGING']:
            globals()[key] = value

# =============================================================================
# CONFIGURAÇÕES FINAIS DE OTIMIZAÇÃO
# =============================================================================

# Otimizações de banco de dados
if not DEBUG:
    DATABASES['default']['CONN_MAX_AGE'] = 60

# Configurações de arquivo de upload mais restritivas
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# =============================================================================
# CONFIGURAÇÕES DO DJANGO-COMPRESSOR
# =============================================================================

COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = not DEBUG
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_URL = STATIC_URL

COMPRESS_PRECOMPILERS = (
    ('text/coffeescript', 'coffee --compile --stdio'),
    ('text/less', 'lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/x-scss', 'sass --scss {infile} {outfile}'),
)

COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]

COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.rJSMinFilter',
]

# Configurações de cache para compressor
COMPRESS_CACHE_BACKEND = 'default'
COMPRESS_REBUILD_TIMEOUT = 3600  # 1 hora

# Adicionar compressor aos finders de arquivos estáticos
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]
