"""
Decorators personalizados para prote√ß√£o de rotas
"""

from functools import wraps
from django.shortcuts import redirect
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.core.exceptions import PermissionDenied


def account_activation_required(view_func):
    """
    Decorator que verifica se a conta do usu√°rio est√° ativada.
    Redireciona para p√°gina de ativa√ß√£o se n√£o estiver.
    """
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if not request.user.is_authenticated:
            # Se n√£o est√° logado, redirecionar para login
            return redirect('accounts:login')

        if not request.user.is_active:
            # Se est√° logado mas conta n√£o est√° ativa
            messages.warning(
                request,
                "üîí Sua conta ainda n√£o foi ativada. Para acessar esta p√°gina, voc√™ precisa ativar sua conta usando o c√≥digo enviado por email."
            )
            return redirect(f"{reverse('accounts:ativar_conta')}?email={request.user.email}")

        if not getattr(request.user, 'email_verificado', True):
            # Se conta est√° ativa mas email n√£o foi verificado
            messages.warning(
                request,
                "üìß Seu email n√£o foi verificado. Complete a verifica√ß√£o para acessar esta p√°gina."
            )
            return redirect(f"{reverse('accounts:ativar_conta')}?email={request.user.email}")

        return view_func(request, *args, **kwargs)

    return _wrapped_view


def inactive_user_only(view_func):
    """
    Decorator que permite acesso apenas para usu√°rios n√£o autenticados
    ou com contas inativas (para p√°ginas de ativa√ß√£o).
    """
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if request.user.is_authenticated and request.user.is_active:
            # Se usu√°rio est√° logado e ativo, redirecionar para perfil
            messages.info(
                request,
                "üéâ Sua conta j√° est√° ativa! Voc√™ j√° est√° logado no sistema."
            )
            return redirect('accounts:profile')

        return view_func(request, *args, **kwargs)

    return _wrapped_view


def email_verified_required(view_func):
    """
    Decorator que verifica se o email do usu√°rio foi verificado.
    """
    @wraps(view_func)
    @login_required
    def _wrapped_view(request, *args, **kwargs):
        if not getattr(request.user, 'email_verificado', True):
            messages.warning(
                request,
                "üìß Voc√™ precisa verificar seu email antes de acessar esta p√°gina."
            )
            return redirect(f"{reverse('accounts:ativar_conta')}?email={request.user.email}")

        return view_func(request, *args, **kwargs)

    return _wrapped_view


def admin_or_superuser_required(view_func):
    """
    Decorator que verifica se o usu√°rio √© administrador ou superusu√°rio.
    """
    @wraps(view_func)
    @login_required
    @account_activation_required
    def _wrapped_view(request, *args, **kwargs):
        # Verificar se √© superuser
        if request.user.is_superuser:
            return view_func(request, *args, **kwargs)

        # Verificar se est√° no grupo Administrador
        if request.user.groups.filter(name='Administrador').exists():
            return view_func(request, *args, **kwargs)

        # Se n√£o √© admin nem superuser
        messages.error(
            request,
            "üö´ Acesso negado. Voc√™ precisa ser administrador para acessar esta p√°gina."
        )
        raise PermissionDenied("Acesso restrito a administradores")

    return _wrapped_view


def staff_required(view_func):
    """
    Decorator que verifica se o usu√°rio √© staff.
    """
    @wraps(view_func)
    @login_required
    @account_activation_required
    def _wrapped_view(request, *args, **kwargs):
        if not request.user.is_staff:
            messages.error(
                request,
                "üö´ Acesso negado. Voc√™ precisa ser um usu√°rio staff para acessar esta p√°gina."
            )
            raise PermissionDenied("Acesso restrito a usu√°rios staff")

        return view_func(request, *args, **kwargs)

    return _wrapped_view


def group_required(*group_names):
    """
    Decorator que verifica se o usu√°rio pertence a pelo menos um dos grupos especificados.

    Uso: @group_required('Administrador', 'Usuario')
    """
    def decorator(view_func):
        @wraps(view_func)
        @login_required
        @account_activation_required
        def _wrapped_view(request, *args, **kwargs):
            user_groups = request.user.groups.values_list('name', flat=True)

            if not any(group in user_groups for group in group_names):
                group_list = ', '.join(group_names)
                messages.error(
                    request,
                    f"üö´ Acesso negado. Voc√™ precisa pertencer a um dos grupos: {group_list}"
                )
                raise PermissionDenied(f"Acesso restrito aos grupos: {group_list}")

            return view_func(request, *args, **kwargs)

        return _wrapped_view

    return decorator


def anonymous_required(view_func):
    """
    Decorator que permite acesso apenas para usu√°rios n√£o autenticados.
    Redireciona usu√°rios logados para uma p√°gina de aviso adequada.
    """
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if request.user.is_authenticated:
            # Determinar o tipo de p√°gina que estava tentando acessar
            view_name = request.resolver_match.url_name if request.resolver_match else 'unknown'

            # Evitar loop de redirecionamento - n√£o redirecionar se j√° estamos nas p√°ginas de aviso
            if view_name in ['already_logged_in_register', 'already_logged_in_login']:
                return view_func(request, *args, **kwargs)

            if view_name == 'register':
                # Para registro, mostrar p√°gina espec√≠fica explicando o motivo
                return redirect('accounts:already_logged_in_register')
            elif view_name == 'login':
                # Para login, mostrar p√°gina espec√≠fica explicando o motivo
                return redirect('accounts:already_logged_in_login')
            else:
                # Para outras p√°ginas, redirecionar para o perfil com mensagem
                messages.info(
                    request,
                    "üéâ Voc√™ j√° est√° logado no sistema!"
                )
                return redirect('accounts:profile')

        return view_func(request, *args, **kwargs)

    return _wrapped_view


def account_complete_required(view_func):
    """
    Decorator que verifica se a conta est√° completamente configurada.
    Pode ser usado para verificar se perfil foi preenchido, etc.
    """
    @wraps(view_func)
    @login_required
    @account_activation_required
    def _wrapped_view(request, *args, **kwargs):
        # Verificar se perfil est√° completo (exemplo)
        user = request.user

        # Verifica√ß√µes b√°sicas de perfil completo
        if not user.first_name or not user.last_name:
            messages.warning(
                request,
                "üìù Complete seu perfil antes de acessar esta p√°gina."
            )
            return redirect('accounts:edit_profile')

        return view_func(request, *args, **kwargs)

    return _wrapped_view
