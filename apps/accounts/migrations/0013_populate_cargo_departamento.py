# Generated by Django 5.2.1 on 2025-05-23 18:15

from django.db import migrations


def populate_cargo_departamento(apps, schema_editor):
    """
    Cria registros iniciais para Cargo e Departamento e atualiza as referências
    """
    # Obter os modelos
    Cargo = apps.get_model('accounts', 'Cargo')
    Departamento = apps.get_model('accounts', 'Departamento')
    CustomUser = apps.get_model('accounts', 'CustomUser')

    # Coletar cargos e departamentos únicos dos usuários existentes
    cargos_unicos = set()
    departamentos_unicos = set()

    for user in CustomUser.objects.all():
        if user.cargo and user.cargo.strip():
            cargos_unicos.add(user.cargo.strip())
        if user.departamento and user.departamento.strip():
            departamentos_unicos.add(user.departamento.strip())

    # Adicionar alguns cargos e departamentos padrão
    cargos_padrao = ['Desenvolvedor', 'Analista', 'Gerente', 'Diretor', 'Administrador']
    departamentos_padrao = ['TI', 'RH', 'Financeiro', 'Marketing', 'Vendas', 'Administrativo']

    for cargo in cargos_padrao:
        cargos_unicos.add(cargo)

    for departamento in departamentos_padrao:
        departamentos_unicos.add(departamento)

    # Criar registros de Cargo
    cargo_map = {}  # Mapear nome do cargo para objeto Cargo
    for nome_cargo in cargos_unicos:
        cargo = Cargo.objects.create(nome=nome_cargo)
        cargo_map[nome_cargo] = cargo

    # Criar registros de Departamento
    departamento_map = {}  # Mapear nome do departamento para objeto Departamento
    for nome_departamento in departamentos_unicos:
        departamento = Departamento.objects.create(nome=nome_departamento)
        departamento_map[nome_departamento] = departamento

    # Atualizar referências nos usuários existentes
    for user in CustomUser.objects.all():
        if user.cargo and user.cargo.strip() in cargo_map:
            user.cargo_fk = cargo_map[user.cargo.strip()]

        if user.departamento and user.departamento.strip() in departamento_map:
            user.departamento_fk = departamento_map[user.departamento.strip()]

        user.save()


def reverse_populate(apps, schema_editor):
    """
    Reverte as alterações, limpando as referências e removendo os registros
    """
    # Obter os modelos
    Cargo = apps.get_model('accounts', 'Cargo')
    Departamento = apps.get_model('accounts', 'Departamento')
    CustomUser = apps.get_model('accounts', 'CustomUser')

    # Limpar referências
    for user in CustomUser.objects.all():
        user.cargo_fk = None
        user.departamento_fk = None
        user.save()

    # Remover registros
    Cargo.objects.all().delete()
    Departamento.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0012_remove_cargo_departamento_customuser_cargo_fk_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_cargo_departamento, reverse_populate),
    ]
