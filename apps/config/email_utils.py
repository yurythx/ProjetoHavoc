"""
Utilit√°rios para configura√ß√£o din√¢mica de email
"""

from django.core.mail import get_connection, send_mail
from django.conf import settings
from .models import EmailConfig
import logging

logger = logging.getLogger(__name__)

def get_active_email_config():
    """
    Retorna a configura√ß√£o de email ativa (prioriza a padr√£o)
    """
    try:
        # Primeiro, tentar obter a configura√ß√£o padr√£o
        default_config = EmailConfig.objects.filter(is_default=True, is_active=True).first()
        if default_config:
            return default_config

        # Se n√£o houver padr√£o, pegar qualquer configura√ß√£o ativa
        return EmailConfig.objects.filter(is_active=True).first()
    except Exception as e:
        logger.error(f"Erro ao buscar configura√ß√£o ativa: {e}")
        return None

def get_email_connection(config=None):
    """
    Cria uma conex√£o de email usando a configura√ß√£o especificada ou a ativa
    """
    if config is None:
        config = get_active_email_config()

    if not config:
        # Usar configura√ß√µes padr√£o do Django
        return get_connection()

    try:
        # Escolher backend baseado na configura√ß√£o
        if config.use_console_backend:
            # Usar backend de console para desenvolvimento
            connection = get_connection(
                backend='django.core.mail.backends.console.EmailBackend',
                fail_silently=False,
            )
        else:
            # Usar backend SMTP para produ√ß√£o
            connection = get_connection(
                backend='django.core.mail.backends.smtp.EmailBackend',
                host=config.email_host,
                port=config.email_port,
                username=config.email_host_user,
                password=config.get_password(),
                use_tls=config.email_use_tls,
                fail_silently=False,
            )
        return connection
    except Exception as e:
        logger.error(f"Erro ao criar conex√£o de email: {e}")
        return None

def send_email_with_config(subject, message, from_email=None, recipient_list=None, config=None, html_message=None):
    """
    Envia email usando a configura√ß√£o especificada ou a ativa
    """
    if config is None:
        config = get_active_email_config()

    if not config:
        logger.warning("Nenhuma configura√ß√£o de email ativa encontrada")
        return False

    if from_email is None:
        from_email = config.default_from_email

    if not recipient_list:
        logger.error("Lista de destinat√°rios n√£o fornecida")
        return False

    try:
        connection = get_email_connection(config)
        if not connection:
            return False

        result = send_mail(
            subject=subject,
            message=message,
            from_email=from_email,
            recipient_list=recipient_list,
            connection=connection,
            fail_silently=False,
            html_message=html_message
        )

        logger.info(f"Email enviado com sucesso para {recipient_list}")
        return result > 0

    except Exception as e:
        logger.error(f"Erro ao enviar email: {e}")
        return False

def test_email_connection(config=None):
    """
    Testa a conex√£o de email
    """
    if config is None:
        config = get_active_email_config()

    if not config:
        return False, "Nenhuma configura√ß√£o de email ativa encontrada"

    try:
        connection = get_email_connection(config)
        if not connection:
            return False, "Erro ao criar conex√£o"

        # Testar abertura da conex√£o
        connection.open()
        connection.close()

        return True, "Conex√£o testada com sucesso"

    except Exception as e:
        return False, f"Erro na conex√£o: {str(e)}"

def send_test_email(recipient_email, config=None):
    """
    Envia um email de teste
    """
    if config is None:
        config = get_active_email_config()

    if not config:
        return False, "Nenhuma configura√ß√£o de email ativa encontrada"

    subject = "üß™ Teste de Configura√ß√£o de Email - Projeto Havoc"
    message = f"""
Ol√°!

Este √© um email de teste do sistema Projeto Havoc.

Configura√ß√£o utilizada:
- Servidor: {config.email_host}:{config.email_port}
- TLS: {'Sim' if config.email_use_tls else 'N√£o'}
- Usu√°rio: {config.email_host_user}
- Email padr√£o: {config.default_from_email}

Se voc√™ recebeu este email, a configura√ß√£o est√° funcionando corretamente! ‚úÖ

Data/Hora: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}

Atenciosamente,
Sistema Projeto Havoc
    """

    html_message = f"""
    <html>
    <body>
        <h2>üß™ Teste de Configura√ß√£o de Email - Projeto Havoc</h2>

        <p>Ol√°!</p>

        <p>Este √© um email de teste do sistema Projeto Havoc.</p>

        <h3>Configura√ß√£o utilizada:</h3>
        <ul>
            <li><strong>Servidor:</strong> {config.email_host}:{config.email_port}</li>
            <li><strong>TLS:</strong> {'Sim' if config.email_use_tls else 'N√£o'}</li>
            <li><strong>Usu√°rio:</strong> {config.email_host_user}</li>
            <li><strong>Email padr√£o:</strong> {config.default_from_email}</li>
        </ul>

        <p style="color: green; font-weight: bold;">
            Se voc√™ recebeu este email, a configura√ß√£o est√° funcionando corretamente! ‚úÖ
        </p>

        <p><small>Data/Hora: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}</small></p>

        <p>Atenciosamente,<br>
        <strong>Sistema Projeto Havoc</strong></p>
    </body>
    </html>
    """

    try:
        success = send_email_with_config(
            subject=subject,
            message=message,
            recipient_list=[recipient_email],
            config=config,
            html_message=html_message
        )

        if success:
            return True, f"Email de teste enviado com sucesso para {recipient_email}"
        else:
            return False, "Falha no envio do email de teste"

    except Exception as e:
        return False, f"Erro ao enviar email de teste: {str(e)}"

def apply_email_settings_to_django(config=None):
    """
    Aplica as configura√ß√µes de email ao Django (para uso em desenvolvimento)
    ATEN√á√ÉO: Isso modifica as configura√ß√µes em tempo de execu√ß√£o
    """
    if config is None:
        config = get_active_email_config()

    if not config:
        logger.warning("Nenhuma configura√ß√£o de email ativa para aplicar")
        return False

    try:
        # Aplicar configura√ß√µes ao Django baseado no modo
        if config.use_console_backend:
            # Modo desenvolvimento - emails no terminal
            settings.EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
            logger.info("Backend de console aplicado - emails aparecer√£o no terminal")
        else:
            # Modo produ√ß√£o - envio real via SMTP
            settings.EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
            settings.EMAIL_HOST = config.email_host
            settings.EMAIL_PORT = config.email_port
            settings.EMAIL_HOST_USER = config.email_host_user
            settings.EMAIL_HOST_PASSWORD = config.get_password()
            settings.EMAIL_USE_TLS = config.email_use_tls
            logger.info(f"Backend SMTP aplicado: {config.email_host}:{config.email_port}")

        settings.DEFAULT_FROM_EMAIL = config.default_from_email
        return True

    except Exception as e:
        logger.error(f"Erro ao aplicar configura√ß√µes de email: {e}")
        return False

# Importar timezone no final para evitar problemas de importa√ß√£o circular
from django.utils import timezone

def auto_apply_email_settings():
    """
    Aplica automaticamente as configura√ß√µes de email se dispon√≠veis.
    Esta fun√ß√£o √© segura para ser chamada durante a inicializa√ß√£o.
    """
    try:
        config = get_active_email_config()
        if config:
            apply_email_settings_to_django(config)
            logger.info(f"‚úÖ Configura√ß√µes de email aplicadas automaticamente: {config.name}")
            return True
        else:
            logger.info("‚ö†Ô∏è  Nenhuma configura√ß√£o de email ativa encontrada")
            return False
    except Exception as e:
        logger.debug(f"Erro ao aplicar configura√ß√µes de email automaticamente: {e}")
        return False
