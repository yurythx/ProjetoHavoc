#!/usr/bin/env python
"""
An√°lise profunda e espec√≠fica das regras de neg√≥cio
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.db import IntegrityError, transaction
from apps.config.models import *
from apps.accounts.models import *

def deep_business_analysis():
    """An√°lise profunda das regras de neg√≥cio"""
    print("üî¨ === AN√ÅLISE PROFUNDA DAS REGRAS DE NEG√ìCIO ===")
    
    issues = []
    
    # 1. An√°lise de Constraints e Valida√ß√µes
    print("\n1. üîí ANALISANDO CONSTRAINTS E VALIDA√á√ïES...")
    
    # Testar se SystemConfig realmente √© singleton
    try:
        with transaction.atomic():
            SystemConfig.objects.create(
                site_name="Teste Duplicado",
                site_description="Teste"
            )
            issues.append("‚ùå ERRO CR√çTICO: SystemConfig permite m√∫ltiplas inst√¢ncias (n√£o √© singleton)")
    except Exception:
        print("   ‚úÖ SystemConfig: Singleton funcionando corretamente")
    
    # Testar se EmailConfig permite m√∫ltiplos padr√µes
    try:
        with transaction.atomic():
            EmailConfig.objects.create(
                email_host="teste1.com",
                email_port=587,
                email_host_user="test@test.com",
                email_host_password="test",
                default_from_email="test@test.com",
                is_default=True
            )
            EmailConfig.objects.create(
                email_host="teste2.com", 
                email_port=587,
                email_host_user="test2@test.com",
                email_host_password="test",
                default_from_email="test2@test.com",
                is_default=True
            )
            issues.append("‚ùå ERRO CR√çTICO: EmailConfig permite m√∫ltiplas configura√ß√µes padr√£o")
    except Exception:
        print("   ‚úÖ EmailConfig: Valida√ß√£o de padr√£o √∫nico funcionando")
    
    # 2. An√°lise de Depend√™ncias de Apps
    print("\n2. üîó ANALISANDO DEPEND√äNCIAS DE APPS...")
    
    # Verificar se apps core podem ser desativados
    core_apps = AppConfig.objects.filter(is_core=True)
    for app in core_apps:
        try:
            # Testar via save()
            original_state = app.is_active
            app.is_active = False
            app.save()
            app.refresh_from_db()

            # Se ainda est√° ativo ap√≥s tentar desativar, a prote√ß√£o funcionou
            if app.is_active:
                print(f"   ‚úÖ App core '{app.name}': Prote√ß√£o via save() funcionando (for√ßou ativa√ß√£o)")
            else:
                issues.append(f"‚ùå ERRO CR√çTICO: App core '{app.name}' pode ser desativado via save()")
                app.is_active = True
                app.save()
        except Exception as e:
            print(f"   ‚úÖ App core '{app.name}': Prote√ß√£o via save() funcionando (exce√ß√£o)")

        try:
            # Testar via update() (bypass mais comum)
            AppConfig.objects.filter(pk=app.pk).update(is_active=False)
            app.refresh_from_db()
            if not app.is_active:
                issues.append(f"‚ùå ERRO CR√çTICO: App core '{app.name}' pode ser desativado via update()")
                # Reativar
                app.is_active = True
                app.save()
            else:
                print(f"   ‚úÖ App core '{app.name}': Prote√ß√£o via update() funcionando")
        except Exception as e:
            print(f"   ‚úÖ App core '{app.name}': Prote√ß√£o via update() funcionando (constraint)")
    
    # 3. An√°lise de Valida√ß√µes de Usu√°rio
    print("\n3. üë§ ANALISANDO VALIDA√á√ïES DE USU√ÅRIO...")
    
    User = get_user_model()
    
    # Testar valida√ß√£o de email duplicado
    try:
        with transaction.atomic():
            User.objects.create_user(
                username="teste_dup1",
                email="admin@projetohavoc.com",  # Email j√° existente
                password="test123"
            )
            issues.append("‚ùå ERRO CR√çTICO: Sistema permite emails duplicados")
    except Exception:
        print("   ‚úÖ Valida√ß√£o de email √∫nico funcionando")
    
    # Testar valida√ß√£o de data de nascimento futura
    try:
        with transaction.atomic():
            from datetime import date, timedelta
            future_date = date.today() + timedelta(days=365)
            user = User.objects.create_user(
                username="teste_future",
                email="future@test.com",
                password="test123"
            )
            user.data_nascimento = future_date
            user.save()
            issues.append("‚ùå ERRO CR√çTICO: Sistema permite data de nascimento futura")
    except Exception:
        print("   ‚úÖ Valida√ß√£o de data de nascimento funcionando")
    
    # 4. An√°lise de Criptografia
    print("\n4. üîê ANALISANDO CRIPTOGRAFIA...")
    
    # Testar criptografia de senhas LDAP
    try:
        ldap_config = LDAPConfig.objects.create(
            server="ldap.test.com",
            port=389,
            bind_dn="cn=admin,dc=test,dc=com",
            domain="test.com"
        )
        ldap_config.set_password("senha_teste")
        ldap_config.save()
        
        # Verificar se a senha foi criptografada
        if ldap_config.bind_password == "senha_teste":
            issues.append("‚ùå ERRO CR√çTICO: Senha LDAP n√£o est√° sendo criptografada")
        else:
            print("   ‚úÖ Criptografia de senha LDAP funcionando")
        
        # Testar descriptografia
        decrypted = ldap_config.get_password()
        if decrypted != "senha_teste":
            issues.append("‚ùå ERRO CR√çTICO: Descriptografia de senha LDAP falhando")
        else:
            print("   ‚úÖ Descriptografia de senha LDAP funcionando")
            
        ldap_config.delete()
    except Exception as e:
        issues.append(f"‚ùå ERRO: Falha no teste de criptografia LDAP: {e}")
    
    # 5. An√°lise de Rate Limiting
    print("\n5. ‚ö° ANALISANDO RATE LIMITING...")
    
    # Verificar se rate limiting diferenciado est√° funcionando
    from django.test import Client
    from django.core.cache import cache
    
    # Limpar cache primeiro
    cache.clear()
    
    client = Client()
    
    # Testar rate limiting para usu√°rio an√¥nimo
    anon_blocked = False
    for i in range(105):  # Mais que o limite de 100
        response = client.get('/')
        if response.status_code == 429:
            anon_blocked = True
            break
    
    if not anon_blocked:
        issues.append("‚ùå ERRO: Rate limiting para usu√°rios an√¥nimos n√£o est√° funcionando")
    else:
        print("   ‚úÖ Rate limiting para an√¥nimos funcionando")
    
    # 6. An√°lise de Middleware
    print("\n6. üõ°Ô∏è ANALISANDO MIDDLEWARE...")
    
    # Verificar se middleware de seguran√ßa est√° ativo
    from django.conf import settings
    
    required_middleware = [
        'core.middleware.UnifiedSecurityMiddleware',
        'apps.accounts.middleware.UserAuditMiddleware',
        'apps.config.middleware.AppControlMiddleware'
    ]
    
    for middleware in required_middleware:
        if middleware not in settings.MIDDLEWARE:
            issues.append(f"‚ùå ERRO: Middleware obrigat√≥rio '{middleware}' n√£o est√° ativo")
        else:
            print(f"   ‚úÖ Middleware '{middleware}' ativo")
    
    # 7. An√°lise de Configura√ß√µes Cr√≠ticas
    print("\n7. ‚öôÔ∏è ANALISANDO CONFIGURA√á√ïES CR√çTICAS...")
    
    # Verificar configura√ß√µes de seguran√ßa
    security_settings = {
        'DEBUG': False,  # Deve ser False em produ√ß√£o
        'ALLOWED_HOSTS': ['*'],  # Deve ser configurado adequadamente
        'SECRET_KEY': 'django-insecure-',  # N√£o deve usar chave insegura
    }
    
    if settings.DEBUG:
        issues.append("‚ö†Ô∏è AVISO: DEBUG est√° ativo (n√£o recomendado para produ√ß√£o)")
    
    if '*' in settings.ALLOWED_HOSTS:
        issues.append("‚ö†Ô∏è AVISO: ALLOWED_HOSTS permite qualquer host (risco de seguran√ßa)")
    
    if settings.SECRET_KEY.startswith('django-insecure-'):
        issues.append("‚ùå ERRO CR√çTICO: SECRET_KEY usando valor inseguro padr√£o")
    
    # 8. Resumo Final
    print("\n" + "="*60)
    print("üìã === RESUMO DA AN√ÅLISE PROFUNDA ===")
    
    critical_errors = [issue for issue in issues if issue.startswith("‚ùå ERRO CR√çTICO")]
    errors = [issue for issue in issues if issue.startswith("‚ùå ERRO") and not issue.startswith("‚ùå ERRO CR√çTICO")]
    warnings = [issue for issue in issues if issue.startswith("‚ö†Ô∏è")]
    
    print(f"\nüö® ERROS CR√çTICOS: {len(critical_errors)}")
    for error in critical_errors:
        print(f"   {error}")
    
    print(f"\n‚ùå ERROS: {len(errors)}")
    for error in errors:
        print(f"   {error}")
    
    print(f"\n‚ö†Ô∏è AVISOS: {len(warnings)}")
    for warning in warnings:
        print(f"   {warning}")
    
    if not issues:
        print("\nüéâ SISTEMA PERFEITO!")
        print("‚úÖ Todas as regras de neg√≥cio est√£o implementadas corretamente!")
    else:
        print(f"\nüéØ TOTAL DE PROBLEMAS: {len(issues)}")
        if critical_errors:
            print("üö® A√á√ÉO URGENTE: Corrigir erros cr√≠ticos imediatamente")
        if errors:
            print("‚ùå A√á√ÉO NECESS√ÅRIA: Corrigir erros")
        if warnings:
            print("‚ö†Ô∏è RECOMENDA√á√ÉO: Revisar avisos")

if __name__ == '__main__':
    deep_business_analysis()
