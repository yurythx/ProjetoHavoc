#!/usr/bin/env python
"""
Script para testar o sistema de login completo
"""
import os
import sys
import django
import requests
from django.test import Client
from django.urls import reverse

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.contrib.auth import get_user_model

def test_login_system():
    """Testa o sistema de login completo"""
    User = get_user_model()
    client = Client()
    
    print("=== TESTE DO SISTEMA DE LOGIN ===")
    
    # 1. Testar acesso sem login (deve redirecionar)
    print("\n1. üîí Testando acesso sem login...")
    response = client.get('/config/')
    if response.status_code == 302:
        print("‚úÖ Redirecionamento funcionando (302)")
        print(f"   Redirecionando para: {response.url}")
    else:
        print(f"‚ùå Erro: Status {response.status_code} (esperado 302)")
    
    # 2. Testar p√°gina de login
    print("\n2. üìù Testando p√°gina de login...")
    response = client.get('/accounts/login/')
    if response.status_code == 200:
        print("‚úÖ P√°gina de login carregando (200)")
    else:
        print(f"‚ùå Erro: Status {response.status_code} (esperado 200)")
    
    # 3. Testar login com credenciais v√°lidas
    print("\n3. üîë Testando login com credenciais v√°lidas...")
    
    # Usar usu√°rio admin
    login_data = {
        'username': 'admin',
        'password': 'admin123'
    }
    
    response = client.post('/accounts/login/', login_data, follow=True)
    if response.status_code == 200:
        print("‚úÖ Login realizado com sucesso (200)")
        
        # Verificar se est√° logado
        if hasattr(response, 'wsgi_request') and response.wsgi_request.user.is_authenticated:
            print("‚úÖ Usu√°rio autenticado")
            print(f"   Usu√°rio: {response.wsgi_request.user.username}")
            print(f"   Staff: {response.wsgi_request.user.is_staff}")
        else:
            print("‚ùå Usu√°rio n√£o autenticado ap√≥s login")
    else:
        print(f"‚ùå Erro no login: Status {response.status_code}")
    
    # 4. Testar acesso ao config ap√≥s login
    print("\n4. ‚öôÔ∏è Testando acesso ao config ap√≥s login...")
    response = client.get('/config/')
    if response.status_code == 200:
        print("‚úÖ Acesso ao config funcionando ap√≥s login (200)")
    else:
        print(f"‚ùå Erro: Status {response.status_code} (esperado 200)")
    
    # 5. Testar logout
    print("\n5. üö™ Testando logout...")
    response = client.post('/accounts/logout/', follow=True)
    if response.status_code == 200:
        print("‚úÖ Logout realizado com sucesso (200)")
    else:
        print(f"‚ùå Erro no logout: Status {response.status_code}")
    
    # 6. Verificar se perdeu acesso ap√≥s logout
    print("\n6. üîí Verificando perda de acesso ap√≥s logout...")
    response = client.get('/config/')
    if response.status_code == 302:
        print("‚úÖ Acesso negado ap√≥s logout (302)")
    else:
        print(f"‚ùå Erro: Status {response.status_code} (esperado 302)")
    
    print("\n=== TESTE COMPLETO ===")
    print("‚úÖ Sistema de login funcionando corretamente!")

def test_audit_system():
    """Testa o sistema de auditoria"""
    print("\n=== TESTE DO SISTEMA DE AUDITORIA ===")

    from apps.accounts.models import UserAuditLog

    # Contar logs antes
    logs_before = UserAuditLog.objects.count()
    print(f"üìä Logs de auditoria antes: {logs_before}")

    # Fazer login para gerar log
    client = Client()
    client.post('/accounts/login/', {
        'username': 'admin',
        'password': 'admin123'
    })

    # Acessar config para gerar log
    client.get('/config/')

    # Contar logs depois
    logs_after = UserAuditLog.objects.count()
    print(f"üìä Logs de auditoria depois: {logs_after}")

    if logs_after > logs_before:
        print("‚úÖ Sistema de auditoria funcionando!")

        # Mostrar √∫ltimos logs
        recent_logs = UserAuditLog.objects.order_by('-timestamp')[:3]
        for log in recent_logs:
            print(f"   üìù {log.timestamp}: {log.action} - {log.user}")
    else:
        print("‚ö†Ô∏è Sistema de auditoria pode n√£o estar funcionando")

if __name__ == '__main__':
    test_login_system()
    test_audit_system()
