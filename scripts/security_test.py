#!/usr/bin/env python
"""
Script para testar a seguran√ßa do sistema Projeto Havoc
Verifica se as corre√ß√µes de seguran√ßa est√£o funcionando corretamente
"""

import requests
import sys
import os
import time
import json
import argparse
from datetime import datetime
from urllib.parse import urljoin

# Configura√ß√µes
BASE_URL = 'http://127.0.0.1:8000'
TEST_URLS = [
    '/accounts/test/',
    '/accounts/ldap/',
    '/config/test-module-disabled/',
    '/admin/',
    '/config/',
]

# Headers suspeitos para testar detec√ß√£o
SUSPICIOUS_HEADERS = {
    'User-Agent': 'sqlmap/1.0',
    'X-Forwarded-For': '<script>alert("xss")</script>',
}

def test_url_protection():
    """Testa se URLs protegidas est√£o bloqueando acesso n√£o autorizado"""
    print("üîí Testando prote√ß√£o de URLs...")
    
    session = requests.Session()
    
    for url in TEST_URLS:
        full_url = urljoin(BASE_URL, url)
        try:
            response = session.get(full_url, timeout=5)
            
            # URLs protegidas devem redirecionar para login ou retornar 403/404
            if response.status_code == 200:
                if 'login' in response.text.lower() or 'entrar' in response.text.lower():
                    print(f"  ‚úÖ {url} - PROTEGIDA (Redirecionou para login)")
                elif 'acesso negado' in response.text.lower() or 'permission denied' in response.text.lower():
                    print(f"  ‚úÖ {url} - PROTEGIDA (Acesso negado)")
                else:
                    print(f"  üö® {url} - PROBLEMA: Acess√≠vel sem autentica√ß√£o!")
            elif response.status_code in [302, 403, 404]:
                print(f"  ‚úÖ {url} - PROTEGIDA (Status: {response.status_code})")
            else:
                print(f"  ‚ùì {url} - Status inesperado: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"  ‚ùå {url} - Erro de conex√£o: {e}")

def test_security_headers():
    """Testa se headers de seguran√ßa est√£o sendo aplicados"""
    print("\nüõ°Ô∏è Testando headers de seguran√ßa...")
    
    try:
        response = requests.get(BASE_URL, timeout=5)
        headers = response.headers
        
        # Headers de seguran√ßa esperados
        security_headers = {
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'DENY',
            'X-XSS-Protection': '1; mode=block',
            'Referrer-Policy': 'strict-origin-when-cross-origin',
        }
        
        for header, expected_value in security_headers.items():
            if header in headers:
                if headers[header] == expected_value:
                    print(f"  ‚úÖ {header}: {headers[header]}")
                else:
                    print(f"  ‚ö†Ô∏è  {header}: {headers[header]} (esperado: {expected_value})")
            else:
                print(f"  ‚ùå {header}: AUSENTE")
        
        # Verificar CSP
        if 'Content-Security-Policy' in headers:
            print(f"  ‚úÖ Content-Security-Policy: PRESENTE")
        else:
            print(f"  ‚ùå Content-Security-Policy: AUSENTE")
            
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Erro ao testar headers: {e}")

def test_suspicious_requests():
    """Testa detec√ß√£o de requests suspeitos"""
    print("\nüïµÔ∏è Testando detec√ß√£o de requests suspeitos...")
    
    try:
        # Teste com user agent suspeito
        response = requests.get(
            BASE_URL, 
            headers=SUSPICIOUS_HEADERS,
            timeout=5
        )
        
        if response.status_code == 200:
            print("  ‚ö†Ô∏è  Request suspeito foi aceito")
        else:
            print(f"  ‚úÖ Request suspeito bloqueado (Status: {response.status_code})")
            
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Erro ao testar request suspeito: {e}")

def test_rate_limiting():
    """Testa rate limiting b√°sico"""
    print("\n‚è±Ô∏è Testando rate limiting...")
    
    try:
        # Fazer m√∫ltiplas requests rapidamente
        responses = []
        for i in range(10):
            response = requests.get(BASE_URL, timeout=2)
            responses.append(response.status_code)
        
        # Verificar se alguma foi bloqueada
        if 429 in responses:
            print("  ‚úÖ Rate limiting funcionando (HTTP 429 detectado)")
        else:
            print("  ‚ö†Ô∏è  Rate limiting n√£o detectado (pode estar configurado para limite maior)")
            
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Erro ao testar rate limiting: {e}")

def test_csrf_protection():
    """Testa prote√ß√£o CSRF"""
    print("\nüîê Testando prote√ß√£o CSRF...")
    
    try:
        # Tentar POST sem token CSRF
        response = requests.post(
            urljoin(BASE_URL, '/accounts/login/'),
            data={'username': 'test', 'password': 'test'},
            timeout=5
        )
        
        if response.status_code == 403:
            print("  ‚úÖ Prote√ß√£o CSRF funcionando (HTTP 403)")
        elif 'csrf' in response.text.lower():
            print("  ‚úÖ Prote√ß√£o CSRF funcionando (erro CSRF detectado)")
        else:
            print(f"  ‚ö†Ô∏è  Prote√ß√£o CSRF pode n√£o estar funcionando (Status: {response.status_code})")
            
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Erro ao testar CSRF: {e}")

def run_security_audit(base_url=None):
    """Executa auditoria completa de seguran√ßa"""
    global BASE_URL
    if base_url:
        BASE_URL = base_url

    print("üöÄ Iniciando testes de seguran√ßa do Projeto Havoc...")
    print("=" * 60)

    # Verificar se servidor est√° rodando
    try:
        response = requests.get(BASE_URL, timeout=5)
        print(f"‚úÖ Servidor acess√≠vel em {BASE_URL}")
    except requests.exceptions.RequestException:
        print(f"‚ùå Servidor n√£o acess√≠vel em {BASE_URL}")
        print("   Certifique-se de que o servidor Django est√° rodando")
        return False

    # Executar testes
    results = {
        'timestamp': datetime.now().isoformat(),
        'base_url': BASE_URL,
        'tests': {}
    }

    try:
        test_url_protection()
        results['tests']['url_protection'] = 'PASSED'
    except Exception as e:
        results['tests']['url_protection'] = f'FAILED: {e}'

    try:
        test_security_headers()
        results['tests']['security_headers'] = 'PASSED'
    except Exception as e:
        results['tests']['security_headers'] = f'FAILED: {e}'

    try:
        test_suspicious_requests()
        results['tests']['suspicious_requests'] = 'PASSED'
    except Exception as e:
        results['tests']['suspicious_requests'] = f'FAILED: {e}'

    try:
        test_rate_limiting()
        results['tests']['rate_limiting'] = 'PASSED'
    except Exception as e:
        results['tests']['rate_limiting'] = f'FAILED: {e}'

    try:
        test_csrf_protection()
        results['tests']['csrf_protection'] = 'PASSED'
    except Exception as e:
        results['tests']['csrf_protection'] = f'FAILED: {e}'

    print("\n" + "=" * 60)
    print("üéØ Testes de seguran√ßa conclu√≠dos!")
    print("\nüìã Resumo:")
    print("  - URLs protegidas: Verificadas")
    print("  - Headers de seguran√ßa: Verificados")
    print("  - Detec√ß√£o de amea√ßas: Verificada")
    print("  - Rate limiting: Verificado")
    print("  - Prote√ß√£o CSRF: Verificada")

    # Salvar resultados
    save_audit_results(results)

    return True

def save_audit_results(results):
    """Salva resultados da auditoria"""
    # Criar diret√≥rio de relat√≥rios se n√£o existir
    reports_dir = 'reports'
    if not os.path.exists(reports_dir):
        os.makedirs(reports_dir)

    # Salvar relat√≥rio
    filename = f"security_audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    filepath = os.path.join(reports_dir, filename)

    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

    print(f"\nüìÑ Relat√≥rio salvo em: {filepath}")

def scheduled_audit(interval_hours=24):
    """Executa auditorias agendadas"""
    print(f"üïê Modo agendado ativado - executando a cada {interval_hours} horas")

    while True:
        try:
            print(f"\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Executando auditoria de seguran√ßa...")

            success = run_security_audit()

            if success:
                print("‚úÖ Auditoria conclu√≠da com sucesso")
            else:
                print("‚ùå Auditoria falhou")

            # Aguardar pr√≥xima execu√ß√£o
            sleep_seconds = interval_hours * 3600
            print(f"üò¥ Aguardando {interval_hours} horas para pr√≥xima auditoria...")
            time.sleep(sleep_seconds)

        except KeyboardInterrupt:
            print("\nüõë Modo agendado interrompido")
            break
        except Exception as e:
            print(f"‚ùå Erro na auditoria agendada: {e}")
            time.sleep(300)  # Aguardar 5 minutos antes de tentar novamente

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description='Testes de Seguran√ßa Projeto Havoc')
    parser.add_argument('--url', default='http://127.0.0.1:8000', help='URL base do servidor')
    parser.add_argument('--schedule', action='store_true', help='Executar em modo agendado')
    parser.add_argument('--interval', type=float, default=24, help='Intervalo em horas para modo agendado')
    parser.add_argument('--output', help='Arquivo de sa√≠da para o relat√≥rio')

    args = parser.parse_args()

    if args.schedule:
        scheduled_audit(args.interval)
    else:
        success = run_security_audit(args.url)
        if not success:
            sys.exit(1)

    print("\nüí° Dicas:")
    print("  - Execute este script regularmente para monitorar a seguran√ßa")
    print("  - Use --schedule para execu√ß√£o autom√°tica")
    print("  - Verifique os logs de seguran√ßa em logs/security.log")
    print("  - Configure alertas para eventos suspeitos em produ√ß√£o")

if __name__ == '__main__':
    main()
