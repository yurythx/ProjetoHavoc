#!/usr/bin/env python
"""
Script de limpeza autom√°tica do Projeto Havoc
Remove arquivos desnecess√°rios, logs antigos e otimiza o projeto
"""

import os
import sys
import shutil
import glob
from datetime import datetime, timedelta

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def clean_pycache():
    """Remove todos os arquivos __pycache__"""
    print("üßπ Limpando arquivos __pycache__...")
    
    removed_count = 0
    for root, dirs, files in os.walk('.'):
        if '__pycache__' in dirs:
            pycache_path = os.path.join(root, '__pycache__')
            try:
                shutil.rmtree(pycache_path)
                removed_count += 1
                print(f"   ‚úÖ Removido: {pycache_path}")
            except Exception as e:
                print(f"   ‚ùå Erro ao remover {pycache_path}: {e}")
    
    print(f"   üìä Total de diret√≥rios __pycache__ removidos: {removed_count}")

def clean_old_logs():
    """Remove logs antigos (mais de 30 dias)"""
    print("\nüìÑ Limpando logs antigos...")
    
    if not os.path.exists('logs'):
        print("   ‚ÑπÔ∏è  Diret√≥rio de logs n√£o encontrado")
        return
    
    cutoff_date = datetime.now() - timedelta(days=30)
    removed_count = 0
    
    for log_file in glob.glob('logs/*.log*'):
        try:
            file_time = datetime.fromtimestamp(os.path.getmtime(log_file))
            if file_time < cutoff_date:
                os.remove(log_file)
                removed_count += 1
                print(f"   ‚úÖ Removido: {log_file}")
        except Exception as e:
            print(f"   ‚ùå Erro ao remover {log_file}: {e}")
    
    print(f"   üìä Total de logs antigos removidos: {removed_count}")

def clean_old_reports():
    """Remove relat√≥rios antigos (mais de 90 dias)"""
    print("\nüìä Limpando relat√≥rios antigos...")
    
    if not os.path.exists('reports'):
        print("   ‚ÑπÔ∏è  Diret√≥rio de relat√≥rios n√£o encontrado")
        return
    
    cutoff_date = datetime.now() - timedelta(days=90)
    removed_count = 0
    
    for report_file in glob.glob('reports/*.json'):
        try:
            file_time = datetime.fromtimestamp(os.path.getmtime(report_file))
            if file_time < cutoff_date:
                os.remove(report_file)
                removed_count += 1
                print(f"   ‚úÖ Removido: {report_file}")
        except Exception as e:
            print(f"   ‚ùå Erro ao remover {report_file}: {e}")
    
    print(f"   üìä Total de relat√≥rios antigos removidos: {removed_count}")

def clean_temp_files():
    """Remove arquivos tempor√°rios"""
    print("\nüóÇÔ∏è  Limpando arquivos tempor√°rios...")
    
    temp_patterns = [
        '*.tmp',
        '*.temp',
        '*.bak',
        '*.backup',
        '*.old',
        '*.orig',
        '*~',
        '.DS_Store',
        'Thumbs.db'
    ]
    
    removed_count = 0
    for pattern in temp_patterns:
        for temp_file in glob.glob(pattern):
            try:
                os.remove(temp_file)
                removed_count += 1
                print(f"   ‚úÖ Removido: {temp_file}")
            except Exception as e:
                print(f"   ‚ùå Erro ao remover {temp_file}: {e}")
        
        # Buscar recursivamente
        for temp_file in glob.glob(f'**/{pattern}', recursive=True):
            try:
                os.remove(temp_file)
                removed_count += 1
                print(f"   ‚úÖ Removido: {temp_file}")
            except Exception as e:
                print(f"   ‚ùå Erro ao remover {temp_file}: {e}")
    
    print(f"   üìä Total de arquivos tempor√°rios removidos: {removed_count}")

def clean_empty_directories():
    """Remove diret√≥rios vazios"""
    print("\nüìÅ Removendo diret√≥rios vazios...")
    
    removed_count = 0
    for root, dirs, files in os.walk('.', topdown=False):
        for dir_name in dirs:
            dir_path = os.path.join(root, dir_name)
            try:
                # Verificar se o diret√≥rio est√° vazio
                if not os.listdir(dir_path):
                    os.rmdir(dir_path)
                    removed_count += 1
                    print(f"   ‚úÖ Removido: {dir_path}")
            except Exception as e:
                # Ignorar erros (diret√≥rio pode n√£o estar vazio ou ter permiss√µes)
                pass
    
    print(f"   üìä Total de diret√≥rios vazios removidos: {removed_count}")

def optimize_static_files():
    """Otimiza arquivos est√°ticos"""
    print("\nüé® Verificando arquivos est√°ticos...")
    
    # Verificar se h√° arquivos CSS/JS duplicados
    css_files = glob.glob('static/**/*.css', recursive=True)
    js_files = glob.glob('static/**/*.js', recursive=True)
    
    print(f"   üìä Arquivos CSS encontrados: {len(css_files)}")
    print(f"   üìä Arquivos JS encontrados: {len(js_files)}")
    
    # Verificar se staticfiles est√° sendo usado corretamente
    if os.path.exists('staticfiles'):
        print("   ‚ÑπÔ∏è  Diret√≥rio staticfiles encontrado (usado pelo collectstatic)")
    
    print("   ‚úÖ Verifica√ß√£o de arquivos est√°ticos conclu√≠da")

def check_database_size():
    """Verifica tamanho do banco de dados"""
    print("\nüóÑÔ∏è  Verificando banco de dados...")
    
    db_files = ['db.sqlite3', 'database.db', '*.db']
    total_size = 0
    
    for pattern in db_files:
        for db_file in glob.glob(pattern):
            try:
                size = os.path.getsize(db_file)
                total_size += size
                size_mb = size / (1024 * 1024)
                print(f"   üìä {db_file}: {size_mb:.2f} MB")
            except Exception as e:
                print(f"   ‚ùå Erro ao verificar {db_file}: {e}")
    
    if total_size > 0:
        total_mb = total_size / (1024 * 1024)
        print(f"   üìä Tamanho total do banco: {total_mb:.2f} MB")
        
        if total_mb > 100:
            print("   ‚ö†Ô∏è  Banco de dados grande. Considere fazer limpeza de dados antigos.")
    else:
        print("   ‚ÑπÔ∏è  Nenhum arquivo de banco de dados encontrado")

def generate_cleanup_report():
    """Gera relat√≥rio de limpeza"""
    print("\nüìã Gerando relat√≥rio de limpeza...")
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'project': 'Projeto Havoc',
        'cleanup_actions': [
            'Remo√ß√£o de arquivos __pycache__',
            'Limpeza de logs antigos (>30 dias)',
            'Remo√ß√£o de relat√≥rios antigos (>90 dias)',
            'Limpeza de arquivos tempor√°rios',
            'Remo√ß√£o de diret√≥rios vazios',
            'Otimiza√ß√£o de arquivos est√°ticos',
            'Verifica√ß√£o do banco de dados'
        ]
    }
    
    # Salvar relat√≥rio
    os.makedirs('reports', exist_ok=True)
    report_file = f"reports/cleanup_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    try:
        import json
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print(f"   ‚úÖ Relat√≥rio salvo em: {report_file}")
    except Exception as e:
        print(f"   ‚ùå Erro ao salvar relat√≥rio: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO LIMPEZA DO PROJETO HAVOC")
    print("=" * 60)
    
    start_time = datetime.now()
    
    # Executar limpezas
    clean_pycache()
    clean_old_logs()
    clean_old_reports()
    clean_temp_files()
    clean_empty_directories()
    optimize_static_files()
    check_database_size()
    generate_cleanup_report()
    
    end_time = datetime.now()
    duration = end_time - start_time
    
    print("\n" + "=" * 60)
    print("‚úÖ LIMPEZA CONCLU√çDA COM SUCESSO!")
    print(f"‚è±Ô∏è  Tempo total: {duration.total_seconds():.2f} segundos")
    print("\nüí° Recomenda√ß√µes:")
    print("  - Execute este script regularmente (semanal/mensal)")
    print("  - Fa√ßa backup antes de executar em produ√ß√£o")
    print("  - Monitore o tamanho do banco de dados")
    print("  - Considere usar ferramentas de compress√£o para logs")

if __name__ == '__main__':
    main()
