#!/usr/bin/env python
"""
Teste de performance das valida√ß√µes de email
"""
import os
import sys
import django
import time

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from apps.accounts.validators import (
    validate_real_email_basic, 
    validate_real_email, 
    validate_real_email_strict,
    validate_no_disposable
)
from django.core.exceptions import ValidationError

def test_validation_performance():
    """Testa performance dos diferentes n√≠veis de valida√ß√£o"""
    
    print("‚ö° TESTE DE PERFORMANCE DE VALIDA√á√ÉO DE EMAIL")
    print("=" * 60)
    
    test_emails = [
        'usuario@gmail.com',
        'teste@hotmail.com', 
        'contato@outlook.com',
        'user@yahoo.com',
        'email@empresa.com.br'
    ]
    
    validators = [
        ('üü¢ B√ÅSICO (sintaxe + descart√°veis)', validate_real_email_basic),
        ('üü° PADR√ÉO (+ verifica√ß√£o dom√≠nio)', validate_real_email),
        ('üî¥ RIGOROSO (+ MX + SMTP)', validate_real_email_strict),
        ('‚ö° APENAS DESCART√ÅVEIS', validate_no_disposable),
    ]
    
    for validator_name, validator_func in validators:
        print(f"\n{validator_name}")
        print("-" * 50)
        
        total_time = 0
        success_count = 0
        
        for email in test_emails:
            start_time = time.time()
            
            try:
                validator_func(email)
                result = "‚úÖ V√°lido"
                success_count += 1
            except ValidationError as e:
                result = f"‚ùå {e.message}"
            except Exception as e:
                result = f"‚ö†Ô∏è Erro: {e}"
            
            end_time = time.time()
            duration = (end_time - start_time) * 1000  # em ms
            total_time += duration
            
            print(f"üìß {email:<25} | {duration:6.1f}ms | {result}")
        
        avg_time = total_time / len(test_emails)
        print(f"\nüìä Resumo:")
        print(f"   ‚è±Ô∏è Tempo m√©dio: {avg_time:.1f}ms")
        print(f"   ‚úÖ Sucessos: {success_count}/{len(test_emails)}")
        print(f"   üöÄ Total: {total_time:.1f}ms")

def test_disposable_emails():
    """Teste espec√≠fico para emails descart√°veis"""
    
    print("\n\nüóëÔ∏è TESTE DE EMAILS DESCART√ÅVEIS")
    print("=" * 60)
    
    disposable_emails = [
        'teste@10minutemail.com',
        'user@guerrillamail.com', 
        'temp@mailinator.com',
        'fake@yopmail.com',
        'spam@tempmail.org'
    ]
    
    print("üü¢ VALIDA√á√ÉO B√ÅSICA (deve bloquear todos):")
    print("-" * 40)
    
    for email in disposable_emails:
        start_time = time.time()
        
        try:
            validate_real_email_basic(email)
            result = "‚úÖ Passou (PROBLEMA!)"
        except ValidationError as e:
            result = f"‚ùå Bloqueado: {e.message}"
        
        end_time = time.time()
        duration = (end_time - start_time) * 1000
        
        print(f"üìß {email:<25} | {duration:6.1f}ms | {result}")

def test_invalid_syntax():
    """Teste para emails com sintaxe inv√°lida"""
    
    print("\n\n‚ùå TESTE DE SINTAXE INV√ÅLIDA")
    print("=" * 60)
    
    invalid_emails = [
        'email_sem_arroba.com',
        'email@',
        '@dominio.com',
        'email@dominio',
        'email..duplo@dominio.com'
    ]
    
    print("üü¢ VALIDA√á√ÉO B√ÅSICA (deve rejeitar todos):")
    print("-" * 40)
    
    for email in invalid_emails:
        start_time = time.time()
        
        try:
            validate_real_email_basic(email)
            result = "‚úÖ Passou (PROBLEMA!)"
        except ValidationError as e:
            result = f"‚ùå Rejeitado: {e.message}"
        
        end_time = time.time()
        duration = (end_time - start_time) * 1000
        
        print(f"üìß {email:<25} | {duration:6.1f}ms | {result}")

def performance_recommendation():
    """Recomenda√ß√£o de uso baseada na performance"""
    
    print("\n\nüí° RECOMENDA√á√ïES DE USO")
    print("=" * 60)
    
    print("üü¢ VALIDA√á√ÉO B√ÅSICA (recomendada para registro):")
    print("   ‚ö° Muito r√°pida (< 5ms)")
    print("   ‚úÖ Bloqueia emails descart√°veis")
    print("   ‚úÖ Valida sintaxe")
    print("   üéØ Ideal para: Formul√°rios de registro, newsletter")
    
    print("\nüü° VALIDA√á√ÉO PADR√ÉO (recomendada para perfis):")
    print("   ‚ö° R√°pida (< 100ms)")
    print("   ‚úÖ + Verifica se dom√≠nio existe")
    print("   üéØ Ideal para: Edi√ß√£o de perfil, contatos importantes")
    
    print("\nüî¥ VALIDA√á√ÉO RIGOROSA (usar com cuidado):")
    print("   ‚ö†Ô∏è Lenta (> 1000ms)")
    print("   ‚úÖ + Verifica MX e SMTP")
    print("   üéØ Ideal para: Valida√ß√£o cr√≠tica, verifica√ß√£o manual")
    
    print("\n‚ö° APENAS DESCART√ÅVEIS (super r√°pida):")
    print("   ‚ö° Instant√¢nea (< 1ms)")
    print("   ‚úÖ Apenas bloqueia emails tempor√°rios")
    print("   üéØ Ideal para: Valida√ß√£o adicional, filtros")

if __name__ == "__main__":
    try:
        test_validation_performance()
        test_disposable_emails()
        test_invalid_syntax()
        performance_recommendation()
        
        print("\nüéâ TESTE DE PERFORMANCE CONCLU√çDO!")
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
