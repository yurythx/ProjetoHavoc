#!/usr/bin/env python
"""
An√°lise completa das regras de neg√≥cio do sistema
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from apps.config.models import (
    SystemConfig, EmailConfig, LDAPConfig, SocialProviderConfig,
    DatabaseConfig, Widget, MenuConfig, Plugin, AppConfig,
    EnvironmentVariable
)
from apps.accounts.models import CustomUser, Cargo, Departamento, UserAuditLog

def analyze_business_rules():
    """An√°lise completa das regras de neg√≥cio"""
    print("üîç === AN√ÅLISE COMPLETA DAS REGRAS DE NEG√ìCIO ===")
    
    errors_found = []
    warnings_found = []
    
    # 1. An√°lise de SystemConfig
    print("\n1. üìä ANALISANDO SYSTEMCONFIG...")
    
    try:
        # Verificar se permite m√∫ltiplas inst√¢ncias (deveria ser singleton)
        system_configs = SystemConfig.objects.all()
        if system_configs.count() > 1:
            errors_found.append("‚ùå ERRO: M√∫ltiplas inst√¢ncias de SystemConfig encontradas (deveria ser singleton)")
        elif system_configs.count() == 0:
            warnings_found.append("‚ö†Ô∏è AVISO: Nenhuma configura√ß√£o do sistema encontrada")
        else:
            print("   ‚úÖ SystemConfig: Inst√¢ncia √∫nica encontrada")
    except Exception as e:
        errors_found.append(f"‚ùå ERRO: Falha ao verificar SystemConfig: {e}")
    
    # 2. An√°lise de EmailConfig
    print("\n2. üìß ANALISANDO EMAILCONFIG...")
    
    try:
        email_configs = EmailConfig.objects.all()
        default_configs = EmailConfig.objects.filter(is_default=True)
        
        if default_configs.count() > 1:
            errors_found.append("‚ùå ERRO: M√∫ltiplas configura√ß√µes de email marcadas como padr√£o")
        
        # Verificar configura√ß√µes ativas sem padr√£o
        active_configs = EmailConfig.objects.filter(is_active=True)
        if active_configs.exists() and not default_configs.exists():
            warnings_found.append("‚ö†Ô∏è AVISO: Configura√ß√µes de email ativas mas nenhuma marcada como padr√£o")
        
        print(f"   üìä Total: {email_configs.count()}, Ativas: {active_configs.count()}, Padr√£o: {default_configs.count()}")
        
    except Exception as e:
        errors_found.append(f"‚ùå ERRO: Falha ao verificar EmailConfig: {e}")
    
    # 3. An√°lise de AppConfig e Depend√™ncias
    print("\n3. üîß ANALISANDO APPCONFIG E DEPEND√äNCIAS...")
    
    try:
        app_configs = AppConfig.objects.all()
        core_apps = AppConfig.objects.filter(is_core=True)
        
        # Verificar se apps core est√£o ativos
        inactive_core_apps = core_apps.filter(is_active=False)
        if inactive_core_apps.exists():
            for app in inactive_core_apps:
                errors_found.append(f"‚ùå ERRO: App core '{app.name}' est√° inativo")
        
        # Verificar depend√™ncias circulares
        circular_deps = check_circular_dependencies()
        if circular_deps:
            for dep in circular_deps:
                errors_found.append(f"‚ùå ERRO: Depend√™ncia circular detectada: {dep}")
        
        # Verificar depend√™ncias √≥rf√£s
        orphan_deps = check_orphan_dependencies()
        if orphan_deps:
            for dep in orphan_deps:
                warnings_found.append(f"‚ö†Ô∏è AVISO: App '{dep}' tem depend√™ncias inativas")
        
        print(f"   üìä Total: {app_configs.count()}, Core: {core_apps.count()}, Ativos: {app_configs.filter(is_active=True).count()}")
        
    except Exception as e:
        errors_found.append(f"‚ùå ERRO: Falha ao verificar AppConfig: {e}")
    
    # 4. An√°lise de Usu√°rios
    print("\n4. üë• ANALISANDO USU√ÅRIOS...")
    
    try:
        User = get_user_model()
        users = User.objects.all()
        active_users = users.filter(is_active=True)
        staff_users = users.filter(is_staff=True, is_active=True)
        superusers = users.filter(is_superuser=True, is_active=True)
        
        if not superusers.exists():
            errors_found.append("‚ùå ERRO: Nenhum superusu√°rio ativo encontrado")
        
        if not staff_users.exists():
            warnings_found.append("‚ö†Ô∏è AVISO: Nenhum usu√°rio staff ativo encontrado")
        
        # Verificar usu√°rios com emails duplicados
        from django.db.models import Count
        duplicate_emails = User.objects.values('email').annotate(
            count=Count('email')
        ).filter(count__gt=1)
        
        if duplicate_emails.exists():
            for dup in duplicate_emails:
                errors_found.append(f"‚ùå ERRO: Email duplicado encontrado: {dup['email']}")
        
        print(f"   üìä Total: {users.count()}, Ativos: {active_users.count()}, Staff: {staff_users.count()}, Super: {superusers.count()}")
        
    except Exception as e:
        errors_found.append(f"‚ùå ERRO: Falha ao verificar usu√°rios: {e}")
    
    # 5. An√°lise de Integridade de Dados
    print("\n5. üîó ANALISANDO INTEGRIDADE DE DADOS...")
    
    try:
        # Verificar refer√™ncias √≥rf√£s em UserAuditLog
        audit_logs = UserAuditLog.objects.all()
        orphan_logs = 0
        for log in audit_logs:
            if not log.user:
                orphan_logs += 1
        
        if orphan_logs > 0:
            warnings_found.append(f"‚ö†Ô∏è AVISO: {orphan_logs} logs de auditoria √≥rf√£os encontrados")
        
        print(f"   üìä Logs de auditoria: {audit_logs.count()}, √ìrf√£os: {orphan_logs}")
        
    except Exception as e:
        errors_found.append(f"‚ùå ERRO: Falha ao verificar integridade: {e}")
    
    # 6. An√°lise de Valida√ß√µes
    print("\n6. ‚úÖ ANALISANDO VALIDA√á√ïES...")
    
    validation_issues = check_validation_issues()
    errors_found.extend(validation_issues['errors'])
    warnings_found.extend(validation_issues['warnings'])
    
    # 7. Resumo Final
    print("\n" + "="*60)
    print("üìã === RESUMO DA AN√ÅLISE ===")
    
    print(f"\n‚ùå ERROS CR√çTICOS ENCONTRADOS: {len(errors_found)}")
    for error in errors_found:
        print(f"   {error}")
    
    print(f"\n‚ö†Ô∏è AVISOS ENCONTRADOS: {len(warnings_found)}")
    for warning in warnings_found:
        print(f"   {warning}")
    
    if not errors_found and not warnings_found:
        print("\nüéâ NENHUM PROBLEMA ENCONTRADO!")
        print("‚úÖ Todas as regras de neg√≥cio est√£o corretas!")
    else:
        print(f"\nüéØ TOTAL DE PROBLEMAS: {len(errors_found) + len(warnings_found)}")
        if errors_found:
            print("üö® A√á√ÉO NECESS√ÅRIA: Corrigir erros cr√≠ticos")
        if warnings_found:
            print("‚ö†Ô∏è RECOMENDA√á√ÉO: Revisar avisos")

def check_circular_dependencies():
    """Verifica depend√™ncias circulares em AppConfig"""
    circular_deps = []
    
    def has_circular_dependency(app, visited=None, path=None):
        if visited is None:
            visited = set()
        if path is None:
            path = []
        
        if app.id in visited:
            return path[path.index(app.id):] + [app.id]
        
        visited.add(app.id)
        path.append(app.id)
        
        for dependency in app.dependencies.all():
            result = has_circular_dependency(dependency, visited.copy(), path.copy())
            if result:
                return result
        
        return None
    
    for app in AppConfig.objects.all():
        circular = has_circular_dependency(app)
        if circular:
            app_names = [AppConfig.objects.get(id=app_id).name for app_id in circular]
            circular_deps.append(" -> ".join(app_names))
    
    return list(set(circular_deps))  # Remove duplicatas

def check_orphan_dependencies():
    """Verifica apps com depend√™ncias inativas"""
    orphan_deps = []
    
    for app in AppConfig.objects.filter(is_active=True):
        inactive_deps = app.dependencies.filter(is_active=False)
        if inactive_deps.exists():
            dep_names = [dep.name for dep in inactive_deps]
            orphan_deps.append(f"{app.name} depende de: {', '.join(dep_names)}")
    
    return orphan_deps

def check_validation_issues():
    """Verifica problemas de valida√ß√£o"""
    issues = {'errors': [], 'warnings': []}
    
    # Verificar se h√° dados inv√°lidos que passaram pelas valida√ß√µes
    try:
        # Verificar usu√°rios com datas de nascimento futuras
        User = get_user_model()
        from datetime import date
        future_birth_users = User.objects.filter(data_nascimento__gt=date.today())
        if future_birth_users.exists():
            issues['errors'].append(f"‚ùå ERRO: {future_birth_users.count()} usu√°rios com data de nascimento futura")
        
        # Verificar emails inv√°lidos
        invalid_emails = User.objects.exclude(email__contains='@')
        if invalid_emails.exists():
            issues['errors'].append(f"‚ùå ERRO: {invalid_emails.count()} usu√°rios com emails inv√°lidos")
        
    except Exception as e:
        issues['errors'].append(f"‚ùå ERRO: Falha na verifica√ß√£o de valida√ß√µes: {e}")
    
    return issues

if __name__ == '__main__':
    analyze_business_rules()
